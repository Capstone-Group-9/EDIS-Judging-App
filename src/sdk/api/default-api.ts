/* tslint:disable */
/* eslint-disable */
/**
 * EDIS
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Category } from '../models';
// @ts-ignore
import type { Team } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new instance of a `category`.
         * @summary Create a category
         * @param {Category} category A new &#x60;category&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createcategory: async (category: Category, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('createcategory', 'category', category)
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(category, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new instance of a `team`.
         * @summary Create a team
         * @param {Team} team A new &#x60;team&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createteam: async (team: Team, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'team' is not null or undefined
            assertParamExists('createteam', 'team', team)
            const localVarPath = `/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(team, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing `category`.
         * @summary Delete a category
         * @param {string} categoryId A unique identifier for a &#x60;category&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletecategory: async (categoryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('deletecategory', 'categoryId', categoryId)
            const localVarPath = `/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing `team`.
         * @summary Delete a team
         * @param {string} teamId A unique identifier for a &#x60;team&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteteam: async (teamId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('deleteteam', 'teamId', teamId)
            const localVarPath = `/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of all `category` entities.
         * @summary List All categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getcategories: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the details of a single instance of a `category`.
         * @summary Get a category
         * @param {string} categoryId A unique identifier for a &#x60;category&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getcategory: async (categoryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getcategory', 'categoryId', categoryId)
            const localVarPath = `/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the details of a single instance of a `team`.
         * @summary Get a team
         * @param {string} teamId A unique identifier for a &#x60;team&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getteam: async (teamId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getteam', 'teamId', teamId)
            const localVarPath = `/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of all `team` entities.
         * @summary List All teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getteams: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing `category`.
         * @summary Update a category
         * @param {string} categoryId A unique identifier for a &#x60;category&#x60;.
         * @param {Category} category Updated &#x60;category&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatecategory: async (categoryId: string, category: Category, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('updatecategory', 'categoryId', categoryId)
            // verify required parameter 'category' is not null or undefined
            assertParamExists('updatecategory', 'category', category)
            const localVarPath = `/categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(category, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing `team`.
         * @summary Update a team
         * @param {string} teamId A unique identifier for a &#x60;team&#x60;.
         * @param {Team} team Updated &#x60;team&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateteam: async (teamId: string, team: Team, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('updateteam', 'teamId', teamId)
            // verify required parameter 'team' is not null or undefined
            assertParamExists('updateteam', 'team', team)
            const localVarPath = `/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(team, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new instance of a `category`.
         * @summary Create a category
         * @param {Category} category A new &#x60;category&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createcategory(category: Category, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createcategory(category, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createcategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new instance of a `team`.
         * @summary Create a team
         * @param {Team} team A new &#x60;team&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createteam(team: Team, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createteam(team, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createteam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes an existing `category`.
         * @summary Delete a category
         * @param {string} categoryId A unique identifier for a &#x60;category&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletecategory(categoryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletecategory(categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deletecategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes an existing `team`.
         * @summary Delete a team
         * @param {string} teamId A unique identifier for a &#x60;team&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteteam(teamId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteteam(teamId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteteam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets a list of all `category` entities.
         * @summary List All categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getcategories(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getcategories(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getcategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets the details of a single instance of a `category`.
         * @summary Get a category
         * @param {string} categoryId A unique identifier for a &#x60;category&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getcategory(categoryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getcategory(categoryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getcategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets the details of a single instance of a `team`.
         * @summary Get a team
         * @param {string} teamId A unique identifier for a &#x60;team&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getteam(teamId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getteam(teamId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getteam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets a list of all `team` entities.
         * @summary List All teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getteams(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Team>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getteams(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getteams']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an existing `category`.
         * @summary Update a category
         * @param {string} categoryId A unique identifier for a &#x60;category&#x60;.
         * @param {Category} category Updated &#x60;category&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatecategory(categoryId: string, category: Category, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatecategory(categoryId, category, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updatecategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an existing `team`.
         * @summary Update a team
         * @param {string} teamId A unique identifier for a &#x60;team&#x60;.
         * @param {Team} team Updated &#x60;team&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateteam(teamId: string, team: Team, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateteam(teamId, team, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateteam']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Creates a new instance of a `category`.
         * @summary Create a category
         * @param {Category} category A new &#x60;category&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createcategory(category: Category, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createcategory(category, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new instance of a `team`.
         * @summary Create a team
         * @param {Team} team A new &#x60;team&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createteam(team: Team, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createteam(team, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing `category`.
         * @summary Delete a category
         * @param {string} categoryId A unique identifier for a &#x60;category&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletecategory(categoryId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletecategory(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing `team`.
         * @summary Delete a team
         * @param {string} teamId A unique identifier for a &#x60;team&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteteam(teamId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteteam(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of all `category` entities.
         * @summary List All categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getcategories(options?: RawAxiosRequestConfig): AxiosPromise<Array<Category>> {
            return localVarFp.getcategories(options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the details of a single instance of a `category`.
         * @summary Get a category
         * @param {string} categoryId A unique identifier for a &#x60;category&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getcategory(categoryId: string, options?: RawAxiosRequestConfig): AxiosPromise<Category> {
            return localVarFp.getcategory(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the details of a single instance of a `team`.
         * @summary Get a team
         * @param {string} teamId A unique identifier for a &#x60;team&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getteam(teamId: string, options?: RawAxiosRequestConfig): AxiosPromise<Team> {
            return localVarFp.getteam(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of all `team` entities.
         * @summary List All teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getteams(options?: RawAxiosRequestConfig): AxiosPromise<Array<Team>> {
            return localVarFp.getteams(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing `category`.
         * @summary Update a category
         * @param {string} categoryId A unique identifier for a &#x60;category&#x60;.
         * @param {Category} category Updated &#x60;category&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatecategory(categoryId: string, category: Category, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatecategory(categoryId, category, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing `team`.
         * @summary Update a team
         * @param {string} teamId A unique identifier for a &#x60;team&#x60;.
         * @param {Team} team Updated &#x60;team&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateteam(teamId: string, team: Team, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateteam(teamId, team, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Creates a new instance of a `category`.
     * @summary Create a category
     * @param {Category} category A new &#x60;category&#x60; to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createcategory(category: Category, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createcategory(category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new instance of a `team`.
     * @summary Create a team
     * @param {Team} team A new &#x60;team&#x60; to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createteam(team: Team, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createteam(team, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an existing `category`.
     * @summary Delete a category
     * @param {string} categoryId A unique identifier for a &#x60;category&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletecategory(categoryId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deletecategory(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an existing `team`.
     * @summary Delete a team
     * @param {string} teamId A unique identifier for a &#x60;team&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteteam(teamId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteteam(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of all `category` entities.
     * @summary List All categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getcategories(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getcategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the details of a single instance of a `category`.
     * @summary Get a category
     * @param {string} categoryId A unique identifier for a &#x60;category&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getcategory(categoryId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getcategory(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the details of a single instance of a `team`.
     * @summary Get a team
     * @param {string} teamId A unique identifier for a &#x60;team&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getteam(teamId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getteam(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of all `team` entities.
     * @summary List All teams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getteams(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getteams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing `category`.
     * @summary Update a category
     * @param {string} categoryId A unique identifier for a &#x60;category&#x60;.
     * @param {Category} category Updated &#x60;category&#x60; information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updatecategory(categoryId: string, category: Category, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updatecategory(categoryId, category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing `team`.
     * @summary Update a team
     * @param {string} teamId A unique identifier for a &#x60;team&#x60;.
     * @param {Team} team Updated &#x60;team&#x60; information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateteam(teamId: string, team: Team, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateteam(teamId, team, options).then((request) => request(this.axios, this.basePath));
    }
}

